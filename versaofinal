import pygame
import random
from os import path
import time

#Iniciando todos os modulos que serao utilizados
pygame.init()
pygame.font.init()
pygame.mixer.init()
fnt_dir = path.join(path.dirname(__file__), 'font')
myfont = pygame.font.SysFont('Comic Sans MS', 30)

#Configurando o caminho onde estao as fotos dos carros
pic = path.join(path.dirname(__file__), 'Jogo')

#Configurando o tamanho da tela e velocidade de jogo
displaywidth = 1280
displayheight = 720
vel = 80

#Configurando as cores padroes do jogo
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

#Montando e dando nome para a tela do jogo
display = pygame.display.set_mode((displaywidth, displayheight))
pygame.display.set_caption("Avoid Car")
#Iniciando o modulo do clock
clock = pygame.time.Clock()

#Criando a classe do carro principal, utilizado pelo jogador
class Carro(pygame.sprite.Sprite):
    def _init_(self):
        # Importando imagem do carro
        pygame.sprite.Sprite._init_(self)
        carro_img = pygame.image.load(path.join(pic, "CarroPrincipal.png")).convert()
        self.image = carro_img
        # Configurando o tamanho, posicao e velocidade do carro controlado
        self.image = pygame.transform.scale(carro_img, (80, 100))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.centerx = displaywidth / 2
        self.rect.bottom = displayheight - 10
        self.speedx = 0
        self.radius = int(self.rect.width * .85 / 2)
 # Funcao que atualiza a posicao do carro
    def update(self):
        self.rect.x += self.speedx

        if self.rect.right > displaywidth:
            self.rect.right = displaywidth
        if self.rect.left < 0:
            self.rect.left = 0
            
# Criando a classe dos carros inimigos
class Carro2(pygame.sprite.Sprite):
    def __init__(self):
        # Importando todas as imagens dos carros inimigos e criando uma lista que randomiza a aparicao deles
        pygame.sprite.Sprite.__init__(self)
        carro2_img = pygame.image.load(path.join(pic, "Caminhonete.png")).convert()
        carro3_img = pygame.image.load(path.join(pic, "Caminhonete2.png")).convert()
        carro4_img = pygame.image.load(path.join(pic, "CarroLaranja.png")).convert()
        carro5_img = pygame.image.load(path.join(pic, "CarroVerde.png")).convert()
        carro6_img = pygame.image.load(path.join(pic, "CarroAzul.png")).convert()
        listacarrosinimigos = [carro2_img, carro3_img, carro4_img, carro5_img, carro6_img]

        self.image = pygame.transform.scale(random.choice(listacarrosinimigos), (80, 100))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width * .85 / 2)
        listacarro2 = [500, 550, 600, 680, 750]
        self.rect.x = listacarro2[random.randrange(5)]
        self.rect.y = -40
        self.speedy = random.randrange(2, 7)
 # Atualizando a posicao dos carros
    def update(self):
        listacarro2 = [500, 550, 600, 680, 750]
        self.rect.y += self.speedy
        if self.rect.top > displayheight + 10 or self.rect.left < -25 or self.rect.right > displaywidth + 20:
            self.rect.x = listacarro2[random.randrange(5)]
            self.rect.y = -40
            self.speedy = random.randrange(2, 7)

# Colocando a imagem de background do jogo
background = pygame.image.load(path.join(pic, 'back.png')).convert()
background_rect = background.get_rect()

# Renomeando a variavel do carro principal
player1 = Carro()

# Adicionando o carro principal na tela
all_sprites = pygame.sprite.Group()
all_sprites.add(player1)

# Adicionando os carros inimigos na tela
carros2 = pygame.sprite.Group()
bateu = False
if bateu == False:
    # Randomizando a posicao dos carros inimigos na tela
    for i in range(5):
        c = Carro2()
        all_sprites.add(c)
        carros2.add(c)

run = True

start_ticks = pygame.time.get_ticks()  # starter tick

# Funcao principal para rodar o jogo
while run:
    clock.tick(vel)
    seconds = (pygame.time.get_ticks() - start_ticks) / 1000
    # Teclas utilizadas para movimentar o jogador ou encerrar o jogo
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
            if event.key == pygame.K_LEFT and player1.rect.x > 330:
                player1.speedx -= 5
            if event.key == pygame.K_RIGHT and player1.rect.x < 900:
                player1.speedx += 5
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                player1.speedx = 0
            if event.key == pygame.K_RIGHT:
                player1.speedx = 0
# funcao do codigo para identificar que o jogador nao saiu da pista
    if player1.rect.x < 400:
        player1.rect.x = 400
    if player1.rect.x > 800:
        player1.rect.x = 800
    # Parte do codigo que sinaliza que o carro bateu e encerra o jogo
    batida = pygame.sprite.spritecollide(player1, carros2, False, pygame.sprite.collide_circle)
    # Tela que demonstra o gaameover e o tempo que o jogador sobreviveu
    if batida:
        bateu = True
        player1.kill()
        carros2.empty()
        for e in all_sprites:
            e.kill()
        all_sprites.clear(display, background)
        pygame.display.update()
        display.fill(BLACK)
        pygame.display.flip()
        background = pygame.image.load(path.join(pic, "GAMEOVER.png")).convert()
        background = pygame.transform.scale(background, (displaywidth, displayheight))
        display.blit(background, background_rect)
        background_rect = background.get_rect()
        textsurface = myfont.render('Voce sobreviveu por {} segundos! Parabens!'.format(seconds), True, WHITE)
        text_rect = textsurface.get_rect()
        text_rect.bottomleft = (330, 300)
        #Atualiza o game display
        display.blit(textsurface, text_rect)
        pygame.display.update()
        pygame.display.flip()
        time.sleep(5)
        break

    #Funcao para fazer jogador continuar jogando
    if bateu == False:
        all_sprites.update()
        display.fill(BLACK)

    display.blit(background, background_rect)
    all_sprites.draw(display)
    pygame.display.flip()

# Quit Jogo
pygame.quit()
